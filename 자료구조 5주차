<자료구조 실습> - 연결리스트 (1)
[ 문제 1 ] 위에서 설명한 이중연결리스트를 이용하여 영문자 리스트 ADT를 구현하시오.
◦ 다음 네 가지 연산을 지원해야 함 (순위는 1부터 시작한다고 가정)
- add(list, r, e) : list의 순위 r에 원소 e를 추가한다.
- delete(list, r) : list의 순위 r에 위치한 원소를 삭제한다 (주교재의 remove와 동일)
- get(list, r) : list의 순위 r에 위치한 원소를 반환한다.
- print(list) : list의 모든 원소를 저장 순위대로 공백없이 출력한다.
※ 순위 정보가 유효하지 않으면 화면에 에러 메시지 "invalid position"을 출력하고, 해당
연산을 무시한다.
◦ 입력에 대한 설명 (아래 입출력 예시 참조)
- 각 연산의 내용이 한 줄에 한 개씩 입력되고, 한 개의 줄에는 연산의 종류, 순위, 원소
순서로 입력된다.
- 연산의 종류: 연산 이름의 맨 앞 영문자가 대문자 A, D, G, P로 주어진다.
- 순위: 양의 정수
- 원소: 영문자(대문자, 소문자 모두 가능)

입력 예시 1 출력 예시 1

5 ↦ 연산의 개수: 5
A 1 S ↦ add(list, 1, 'S')
A 2 t ↦ add(list, 2, 't')
A 3 r ↦ add(list, 3, 'r')
A 3 a ↦ add(list, 3, 'a')
P ↦ print(list) Star ↦ 연산 P에 의한 출력

입력 예시 2 출력 예시 2
9 ↦ 연산의 개수: 9
A 1 D ↦ add(list, 1, 'D')
A 2 a ↦ add(list, 2, 'a')
A 3 y ↦ add(list, 3, 'y')
D 1 ↦ delete(list, 1)
P ↦ print(list)
G 3 ↦ get(list, 3)
A 1 S ↦ add(list, 1, 'S')
P ↦ print(list)
G 3 ↦ get(list, 3)
ay
invalid position
Say
y

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef struct node {
	char elem;
	struct node* next;
	struct node* prev;
}Node;

// 리스트 정의하기
typedef struct list {
	Node* header;
	Node* trailer;
	int size;
}List;

// 리스트 초기화하기
List* init() {
	List* list;
	list = (List*)malloc(sizeof(List));
	list->header = (Node*)malloc(sizeof(Node));
	list->trailer = (Node*)malloc(sizeof(Node));
	list->header->next = list->trailer;
	list->header->prev = NULL;
	list->trailer->next = NULL;
	list->trailer->prev = list->header;
	list->size = 0;

	return list;
}

void print(List* list)
{
	Node* current = list->header->next;
	while (current != list->trailer)
	{
		printf("%c", current->elem);
		current = current->next;
	}
}

void addNodeBefore(Node *p, char e)
{
	Node *newnode = (Node*)malloc(sizeof(Node));
	newnode->elem = e;
	newnode->prev = p->prev;
	newnode->next = p;
	p->prev->next = newnode;
	p->prev = newnode;
	return;
}

void add(List *list, int r, char e)
{
	if (r > list->size +1)
	{
		printf("invalid position\n");
		return;
	}
	Node* current = list->header;

	for (int i = 0; i < r; i++)
	{
		if (current->next == NULL)
		{
			printf("invalid position\n");
			return;
		}
		current = current->next;
	}
	addNodeBefore(current, e);
	list->size = list->size + 1;
	return;
}

char get(List* list, int r) 
{
	if (r > list->size)
	{
		printf("invalid position\n");
		return '0';
	}
	Node* current = list->header->next;

	for (int i=0; i<r; i++)
	{
		if (current->next == NULL)
		{
			printf("invalid position\n");
			return '0';
		}
		current = current->next;
	}
	return current->prev->elem;
}


void removeNode(Node *p)
{
	p->prev->next = p->next;
	p->next->prev = p->prev;
	free(p);
}

void del(List* list, int r)
{
	if (r > list->size)
	{
		printf("invalid position\n");
		return;
	}
	Node* current = list->header;
	for (int i = 0; i < r; i++)
	{
		if (current->next == NULL)
		{
			printf("invalid position\n");
			return;
		}
		current = current->next;
	}
	removeNode(current);
	list->size = list->size - 1;
	return;
}

int main() {
	List* list = init(); // -> 초기화 선언됨
	char c, c1;
	int n,g;
	
	scanf("%d", &n);
	for(int i=0; i<n; i++)
	{
		getchar();
		scanf("%c",&c);
		if (c == 'A')
		{
			scanf("%d %c", &g, &c1);
			add(list, g, c1);
		}
		else if (c == 'P')
		{
			print(list);
			printf("\n");
		}
		else if (c == 'G')
		{
			scanf("%d", &g);
			char a = get(list, g);
			if (a == '0')
				continue;
			printf("%c\n",a);
		}
		else if (c== 'D')
		{
			scanf("%d", &g);
			del(list, g);
		}
	}
}
